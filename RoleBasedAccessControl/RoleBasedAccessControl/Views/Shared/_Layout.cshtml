@inject RoleBasedAccessControl.POCO.IApplicationConfiguration AppSettings;
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard - Royal Brothers</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />
    <style>
        .fa {
            cursor:pointer;
        }
    </style>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">Royal Brothers</a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                        <li class="nav-item" style="position: absolute; right: 5%;">
                            <a class="nav-link text-dark" onclick="fn_Logout()" style="cursor:pointer" >Sign Out</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2021 - RoleBasedAccessControl - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @RenderSection("Scripts", required: false)

<script>
    $(document).ready(function () {
        if(sessionStorage.getItem('AccessToken') == null) {
            location.href = sessionStorage.getItem('UIEndPoint') + 'OAuth/Index';
        }
        $(".writeAccess").hide();
        $(".readAccess").hide();
        $(".trash").hide();
        $(".edit").hide();
        fn_GetAllRolesOnly();
        fn_AccessByRole();
    });
    function fn_AccessByRole() {
        if (sessionStorage.getItem("Role").split(', ').includes('Royal Brothers Admin')) {
            // Access to add, edit, delete, view
            $("#Dv_RoleAction").show();
            $(".writeAccess").show();
            $(".writeAccess").show();
            $(".readAccess").show();
            $(".trash").show();
            $(".edit").show();
            fn_RoleView();
        }
        else {
            fn_VisibiltiAccess();
        }
    }
    function fn_VisibiltiAccess() {
        $("#Dv_RoleAction").hide();
        var static_url = sessionStorage.getItem("UIEndPoint") + "api/Users/GetRoleSourceActionDetails?userid=" + sessionStorage.getItem("UserId");
        $.ajax({
            async: true,
            cache: true,
            type: 'GET',
            headers: {
                'Authorization': '' + getJwtBearerToken() + '', 'refreshToken': '' + getRefreshToken() + ''
            },
            url: static_url,
            success: function (xhr, ajaxOptions, thrownError) {
                
                if (thrownError.status === 200) {
                    var data = $.parseJSON(xhr);
                    for (var i = 0; i < data.length; i++) {
                        var Roles = data[i];
                        //$.each(data, function (i, Roles) {
                        for (var j = 0; j < Roles.Sources.length; j++) {
                            var Source = Roles.Sources[j];
                            //$.each(Roles.Sources, function (j, Source) {
                            if (Source.SourceName == "User") {
                                $("#div_userAction").show();
                                for (var k = 0; k < Source.ActionTypes.length; k++) {
                                    var ActionTypes = Source.ActionTypes;
                                    //}
                                    //$.each(Source.ActionTypes, function (k, ActionTypes) {
                                    if (ActionTypes[k].ActionName == 'Read') {
                                        $(".readAccess").show();
                                        console.log(Source.SourceName);
                                    }
                                    if (ActionTypes[k].ActionName == 'Write') {
                                        $(".writeAccess").show();
                                        $(".edit").show();
                                    }
                                    if (ActionTypes[k].ActionName == 'Delete') {
                                        $(".trash").show();
                                    }
                                }
                            }
                            //if (Source.SourceName == "Bike") {
                            //    $.each(Source.ActionTypes, function (k, ActionTypes) {
                            //        if (ActionTypes.ActionName == 'Read') {

                            //        }
                            //        if (ActionTypes.ActionName == 'write') {

                            //        }
                            //        if (ActionTypes.ActionName == 'delete') {

                            //        }
                            //    });
                            //}
                            //if (Source.SourceName == "Booking") {
                            //    $.each(Source.ActionTypes, function (k, ActionTypes) {
                            //        if (ActionTypes.ActionName == 'Read') {

                            //        }
                            //        if (ActionTypes.ActionName == 'write') {

                            //        }
                            //        if (ActionTypes.ActionName == 'delete') {

                            //        }
                            //    });
                            //}
                            //});
                        }
                        //});
                    }
                }
                else if (thrownError.status === 206) {
                    alert($.parseJSON(xhr));
                }
                else {
                    StatusCode = 401;
                    window.location.href = sessionStorage.getItem('UIEndPoint') + "Home/Error?" + StatusCode;
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                //alert('There was problem processing your request. Please try again later.');
                fn_VisibiltiAccess();
                //window.location.href = sessionStorage.getItem('UIEndPoint') + "Home/Error?" + StatusCode;
            }
        });
    }
    
    function fn_Logout() {
        //window.location.href = sessionStorage.getItem('UIEndPoint') + 'OAuth/Login';
        $.ajax({
            cache: false,
            type: 'Post',
            url: sessionStorage.getItem("UIEndPoint") + "OAuth/Logout",
            headers: {
                'Authorization': '' + getJwtBearerToken() + '', 'refreshToken': '' + getRefreshToken() + ''
            },
            contentType: 'application/json',
            success: function (dataReceived, textStatus, request) {
                if (request.status === 200) {
                    sessionStorage.removeItem("AccessToken");
                    sessionStorage.removeItem("RefreshToken");
                    sessionStorage.removeItem("APIEndPoint");
                    sessionStorage.removeItem("UserId");

                    location.href = sessionStorage.getItem('UIEndPoint') + 'OAuth/Index';
                }
            },
            error: function (request, textStatus, errorThrown) {
                alert("error");
            }
        });
    }
</script>
</body>
</html>
